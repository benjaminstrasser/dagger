{{ define "header" -}}
/**
 * This file was auto-generated by `cloak clientgen`.
 * Do not make direct changes to the file.
 */

import { GraphQLClient, gql, ClientError } from "graphql-request"
import {
  GraphQLRequestError,
  UnknownDaggerError,
} from "../common/errors/index.js"
import { queryBuilder, queryFlatten } from "./utils.js"
import { log } from "../common/utils.js"

/**
 * @hidden
 */
export type QueryTree = {
  operation: string
  args?: Record<string, unknown>
}

interface ClientConfig {
  queryTree?: QueryTree[],
  host?: string
}

class BaseClient {
  protected _queryTree:  QueryTree[]
	private client: GraphQLClient;
  /**
   * @defaultValue `127.0.0.1:8080`
   */
  public clientHost: string

  /**
   * @hidden
   */
  constructor({queryTree, host}: ClientConfig = {}) {
    this._queryTree = queryTree || []
    this.clientHost = host || "127.0.0.1:8080"
		this.client = new GraphQLClient(`http://${host}/query`);
  }

  /**
   * @hidden
   */
  get queryTree() {
    return this._queryTree;
  }

  /**
   * @hidden
   */
  protected async _compute<T>(): Promise<T> {
    try {
      // run the query and return the result.
      const query = queryBuilder(this._queryTree)
      const computeQuery = await this.client.request(
        gql`
          ${query}
        `
      )

      return queryFlatten(computeQuery)
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
    } catch (e: any) {
      if (e instanceof ClientError) {
        throw new GraphQLRequestError(
          log(GraphQLRequestError?.name, e.message),
          {
            request: e.request,
            response: e.response,
            cause: e,
          }
        )
      }
      // Just throw the unknown error
      throw new UnknownDaggerError(log(UnknownDaggerError?.name, e.message), {
        cause: e as Error,
      })
    }
  }
}
{{- end }}
